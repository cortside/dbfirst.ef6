#*

        sql_insert.vm - default sql insert stored proc template (replaces SqlGenerator)

*###
IF OBJECT_ID('[dbo].[tr${element.Name}_Update]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr${element.Name}_Update]
	PRINT 'Trigger Dropped: tr${element.Name}_Update '
END
GO

-- Create Update Trigger [dbo].[tr${element.Name}_Update] for Table [dbo].[${element.Name}]
Print 'Create Update Trigger [dbo].[tr${element.Name}_Update] for Table [dbo].[${element.Name}]'
go
CREATE TRIGGER [dbo].[tr${element.Name}_Update]
ON [dbo].[${element.Name}]
FOR UPDATE
NOT FOR REPLICATION
As

BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AuditLogTransactionId	Int,
		@PRIM_KEY				nvarchar(4000),
		@Inserted	    		bit,
		--@TableName			nvarchar(4000),
 		@ROWS_COUNT				int
 
	SET NOCOUNT ON

	--Set @TableName = '[dbo].[${element.Name}]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

-- CAS: get the userId from the inserted data
declare @userId int
select @userId=LastModifiedUserId from inserted

	INSERT
	INTO dbo.AuditLogTransaction 
	(
		TableName,
		TableSchema,
		AuditActionId,
		HostName,
		ApplicationName,
		AuditLogin,
		AuditDate,
		AffectedRows,
		DatabaseName,
		UserId
	)
	values(
		'${element.Name}',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		db_name(),
		@userId
	)
	
	
	Set @AuditLogTransactionId = SCOPE_IDENTITY()
	
	
	SET @Inserted = 0

#macro ( statementMacro $columnName $columnSqlTypeName )
	If UPDATE($sql.Escape($columnName))
	BEGIN
    
		INSERT
		INTO AuditLog 
		(
			AuditLogTransactionId,
			PrimaryKey,
			ColumnName,
			OldValue,
			NewValue,
			DataType
			, Key1
		)
		SELECT
			@AuditLogTransactionId,
		    convert(nvarchar(1500), IsNull('[${element.Name}Id]='+CONVERT(nvarchar(4000), IsNull(OLD.[${element.Name}Id], NEW.[${element.Name}Id]), 0), '[${element.Name}Id] Is Null')),
		    '$columnName',
			CONVERT(nvarchar(4000), OLD.$sql.Escape($columnName),#if($columnSqlTypeName=="DateTime") 121#else 0#end),
			CONVERT(nvarchar(4000), NEW.$sql.Escape($columnName),#if($columnSqlTypeName=="DateTime") 121#else 0#end),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[${element.Name}Id], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[${element.Name}Id], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[${element.Name}Id], 0)=CONVERT(nvarchar(4000), OLD.[${element.Name}Id], 0) or (NEW.[${element.Name}Id] Is Null and OLD.[${element.Name}Id] Is Null))
			where (
				(
					NEW.$sql.Escape($columnName) <>
					OLD.$sql.Escape($columnName)
				) Or
			
				(
					NEW.$sql.Escape($columnName) Is Null And
					OLD.$sql.Escape($columnName) Is Not Null
				) Or
				(
					NEW.$sql.Escape($columnName) Is Not Null And
					OLD.$sql.Escape($columnName) Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
#end

#foreach ($column in $element.Columns)	
#if (!$column.ViewColumn)
#statementMacro( $column.Name $column.SqlType.Name )
#end	
#end
#if ($element.audit) 
#statementMacro( "CreateUserId" "Int" )
#statementMacro( "CreateDate" "DateTime" )
#statementMacro( "LastModifiedUserId" "Int" )
#statementMacro( "LastModifiedDate" "DateTime" )
#end

	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AuditLogTransaction WHERE AuditLogTransactionId = @AuditLogTransactionId
	END
	-- Restore @@IDENTITY Value  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger Created: tr${element.Name}_Update '
ELSE PRINT 'Trigger Failed: tr${element.Name}_Update Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[${element.Name}]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  EXEC sp_settriggerorder '[dbo].[tr${element.Name}_Update]', 'Last', 'Update'
  If @@Error = 0 PRINT 'Trigger tr${element.Name}_Update has been marked as Last' 
END

GO
