#*

        sql_insert.vm - default sql insert stored proc template (replaces SqlGenerator)

*###
#*if($element.GenerateInsertStoredProcScript)*###
#if($element.GenerateTriggerScript)
#set($at = '@')
if exists (select * from dbo.sysobjects where xtype = 'TR') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[tr${element.Name}_Audit]
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER _______ ON
	table.column AFTER INSERT, UPDATE
AS _____________<this is where I last left off...rw>

#set($cols = 0)
#foreach($column in $element.Columns)#if(!$column.ViewColumn && (!$column.Identity || $doBoth))#set($cols = $cols + 1)#if($cols>1),
#end	@${column.CodeSafeName}	${column.SqlType.Declaration} = null#end
#end


AS

## this is to set the columns set to null with their default if they have one and the column is required
#foreach($column in $element.Columns)#if($column.Default.Length > 0 && !$column.ViewColumn && $column.Required)
if @$column.Name is null set @$column.Name=$column.Default
#end#end

INSERT INTO $sql.Escape($element.Name)
#set($cols = 0)
#foreach($column in $element.Columns)#if(!$column.Identity && !$column.ViewColumn)#if($cols==0)(#end#set($cols = $cols + 1)#if($cols>1),
#end	$sql.Escape(${column.Name})#end
#end
#if ($cols == 0)
DEFAULT VALUES
#else
)
#set($cols = 0)
VALUES (
#foreach($column in $element.Columns)#if(!$column.Identity && !$column.ViewColumn)#set($cols = $cols + 1)#if($cols>1),
#end	${at}${column.CodeSafeName}#end#end)
#end

if @@rowcount <> 1 or @@error!=0
    BEGIN
        RAISERROR  20000 'sp${element.Name}_Insert: Unable to insert new row into $element.Name table '
        RETURN(-1)
    END

return SCOPE_IDENTITY()
GO

#if ($element.User.Length > 0)
grant execute on [sp${element.Name}_Insert] to [$element.User]
GO

#end
#end
