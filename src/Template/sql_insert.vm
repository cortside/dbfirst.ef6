#*

        sql_insert.vm - default sql insert stored proc template (replaces SqlGenerator)

*###
#if($element.GenerateInsertStoredProcScript)
#set($at = '@')
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp${element.Name}_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp${element.Name}_Insert]
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE dbo.$sql.Escape("sp${element.Name}_Insert")
#set($cols = 0)
#foreach($column in $element.Columns)#if(!$column.ViewColumn && (!$column.Identity || $doBoth))#set($cols = $cols + 1)#if($cols>1),
#end	@${column.CodeSafeName}	${column.SqlType.Declaration} = null#end
#end
#if($element.Audit)#if($element.Columns.Count>0),#end

	@CreateDate DateTime = null,
	@CreateUserId Int = null,
	@LastModifiedDate DateTime = null,
	@LastModifiedUserId Int = null
#end

AS

## this is to set the columns set to null with their default if they have one and the column is required
#foreach($column in $element.Columns)#if($column.Default.Length > 0 && !$column.ViewColumn && $column.Required)
if @$column.Name is null set @$column.Name=$column.Default
#end#end

INSERT INTO $sql.Escape($element.Name)
#set($cols = 0)
#foreach($column in $element.Columns)#if(!$column.Identity && !$column.ViewColumn)#if($cols==0)(#end#set($cols = $cols + 1)#if($cols>1),
#end	$sql.Escape(${column.Name})#end
#end
#if ($element.Audit)#if($element.Columns.Count>0),#end
	
	CreateDate,
	CreateUserId,
	LastModifiedDate,
	LastModifiedUserId
#end
#if ($cols == 0)
DEFAULT VALUES
#else
)
#set($cols = 0)
VALUES (
#foreach($column in $element.Columns)#if(!$column.Identity && !$column.ViewColumn)#set($cols = $cols + 1)#if($cols>1),
#end	${at}${column.CodeSafeName}#end#end
#if($element.Audit)#if($element.Columns.Count>0),#end
	
	@CreateDate,
	@CreateUserId,
	@LastModifiedDate,
	@LastModifiedUserId
#end)
#end

#*if @@rowcount <> 1 or @@error!=0
    BEGIN
        RAISERROR  ('sp${element.Name}_Insert: Unable to insert new row into $element.Name table ', 16,1)
        RETURN(-1)
    END
*#

SELECT SCOPE_IDENTITY()
GO

#if ($element.User.Length > 0)
grant execute on [sp${element.Name}_Insert] to [$element.User]
GO

#end
#end